#!/usr/bin/env bash

if [ -z "${BASH_VERSION-}" ]; then
    printf '%s\n' 'dotfiles: interpreter is not bash' >&2
    exit 1
fi

if [[ $# -lt 1 ]]; then
    printf '%s\n' 'USAGE: dotfiles [install|doctor]'
    exit 0
fi

relpath() {
    local base=$1
    local path=$2

    if command -v realpath &> /dev/null && [ -n "$(realpath --help | grep 'relative-to')" ]; then
        realpath --relative-to="${base}" "${path}"
        return
    fi

    if command -v python &> /dev/null ; then
        python -c "import os.path, sys; print(os.path.relpath(*sys.argv[1:]))" "$base" "$path"
        return
    fi

    if command -v perl &> /dev/null ; then
        perl -le 'use File::Spec; print File::Spec->abs2rel(@ARGV)' "$path" "$base"
        return
    fi

    printf '%s\n' 'dotfiles: could not execute relpath' >&2
    exit 1
}

install_dotfile() {
    local src=$1
    local dst=$2

    if [ -e "${dst}" ]; then
        rm "${dst}"
    fi

    ln -s $(relpath "$(dirname "${dst}")" "${src}") "${dst}"
}

case $1 in
    install)
        export XDG_CONFIG_HOME="${HOME}/.config"
        mkdir -p "${XDG_CONFIG_HOME}" && chmod go-rwx "${XDG_CONFIG_HOME}"

        if [ -e "${XDG_CONFIG_HOME}/dotfiles" ]; then
            rm -rf "${XDG_CONFIG_HOME}/dotfiles"
        fi

        cp -rL . "${XDG_CONFIG_HOME}/dotfiles"

        rm -f "${HOME}/.bash_profile" "${HOME}/.bash_login" "${HOME}/.bashrc" "${HOME}/.bash_logout"

        install_dotfile "${XDG_CONFIG_HOME}/dotfiles/modules/shell/profile" "${HOME}/.profile"

        exit 0
        ;;
    doctor)
        read_tap_results() {
            while IFS=$'\n' read -r line
            do
                if echo "${line}" | grep -q "^ok" ; then
                    read -r nb name <<< "${line#ok}"
                    echo "ok|${name}"
                    continue
                fi

                if echo "${line}" | grep -q "^not ok" ; then
                    read -r nb name <<< "${line#not ok}"
                    echo "ko|${name}"
                    continue
                fi
            done
        }

        NB_SUCCESS=0
        NB_FAILURE=0

        while IFS='|' read -r status name
        do
            echo ${status} ${name}

            if [ "${status}" = "ok" ]; then
                (( NB_SUCCESS += 1 ))
            else
                (( NB_FAILURE += 1 ))
            fi
        done < <(bats tests/test.xdg.bats -F tap | read_tap_results)

        (( ${NB_FAILURE} == 0 ))
        exit
        ;;
    *)
        printf '%s\n' 'dotfiles: unknown command ${1}' >&2
        exit 1
        ;;
esac
